#include <iostream>
#include <cmath>
using namespace std;

class complex {
private:
    float real;
    float imag;

public:
    complex() : real(0), imag(0) {} // Default constructor
    complex(float real, float imag) : real(real), imag(imag) {}

    complex operator + (complex &c) {
        return complex(real + c.real, imag + c.imag);
    }

    complex operator - (complex &c) {
        return complex(real - c.real, imag - c.imag);
    }

    complex operator * (complex &c) {
        float r = real * c.real - imag * c.imag;
        float i = real * c.imag + imag * c.real;
        return complex(r, i);
    }

    complex operator / (complex &c) {
        float denominator = c.real * c.real + c.imag * c.imag;
        float r = (real * c.real + imag * c.imag) / denominator;
        float i = (imag * c.real - real * c.imag) / denominator;
        return complex(r, i);
    }

    friend ostream& operator << (ostream& os, const complex &c);
    friend double magnitude(complex &c);
};

ostream& operator << (ostream& os, const complex &c) {
    os << c.real << " + " << c.imag << "i";
    return os;
}

double magnitude(complex &c) {
    return sqrt(c.real * c.real + c.imag * c.imag);
}

int main() {
    complex c1(3, 4);
    complex c2(1, 2);

    cout << "Adding using operator overloading" << endl;
    complex c3 = c1 + c2;
    cout << "c1 + c2 = " << c3 << endl;

    cout << "\nSubtracting using operator overloading" << endl;
    complex c4 = c1 - c2;
    cout << "c1 - c2 = " << c4 << endl;

    cout << "\nMultiplying using operator overloading" << endl;
    complex c5 = c1 * c2;
    cout << "c1 * c2 = " << c5 << endl;

    cout << "\nDividing using operator overloading" << endl;
    complex c6 = c1 / c2;
    cout << "c1 / c2 = " << c6 << endl;

    cout << "\nCalculating magnitude" << endl;
    double mag = magnitude(c1);
    cout << "Magnitude of c1 = " << mag << endl;

    return 0;
}

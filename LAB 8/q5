#include <iostream>
using namespace std;

class matrix2x2 {
    int a ;
    int b;
    int c;
    int d;
    public:
    matrix2x2(int a , int b , int c , int d) : a(a) , b(b) , c(c) , d(d) {}
    matrix2x2 operator + (matrix2x2 &m) {
        return matrix2x2(a+m.a , b+m.b , c+m.c , d+m.d);
    }
    matrix2x2 operator - (matrix2x2 &m) {
        return matrix2x2(a-m.a , b-m.b , c-m.c , d-m.d);
    }
    matrix2x2 operator * (matrix2x2 &m) {
        return matrix2x2(a*m.a + b*m.c , a*m.b + b*m.d , c*m.a + d*m.c , c*m.b + d*m.d);
    }
friend void deteminant (matrix2x2 &m);
friend class matrixHelper;
friend ostream& operator <<(ostream& os , const matrix2x2 &m);
    
};

void deteminant (matrix2x2 &m) {
    int det = m.a * m.d - m.b * m.c;
    cout << "determinant = " << det << endl;
}

class matrixHelper {
    public:

    void updatingElement(matrix2x2 &m1 ,int a , int b , int c ,int d) {
        cout << "updating element" << endl;
        m1.a = a;
        m1.b = b;
        m1.c = c;
        m1.d = d;
        cout << "matrix updated " << endl;

    }

}; 

ostream& operator << (ostream &os , const matrix2x2 &m) {
    os <<endl<< m.a << " " << m.b << endl;
    os << m.c <<    " " << m.d << endl;
    return os;
}

int main () {
    matrix2x2 m1(1,2,3,4);
    matrix2x2 m2(5,6,7,8);
    matrixHelper mh;
    cout << "m1 = " << m1 << endl;
    cout << "m2 = " << m2 << endl;
    cout << "adding using operator overloading" << endl;
    matrix2x2 m3 = m1 + m2;  
    cout <<endl<< "m1 + m2 = " << m3 << endl;
    cout << "subtracting using operator overloading" << endl;
    matrix2x2 m4 = m1 - m2;
    cout << endl<< "m1 - m2 = " << m4 << endl;
    cout << "multiplying using operator overloading" << endl;
    matrix2x2 m5 = m1 * m2;
    cout <<endl<< "m1 * m2 = " << m5 << endl;
    cout<<"determinanat of m1" <<endl;
    deteminant(m1);
    cout<<"determinanat of m2" <<endl;
    deteminant(m2);
    cout<<"updating m1" <<endl;
    mh.updatingElement(m1 , 5 , 6 , 7 , 8);
    cout << "m1 = " << m1 << endl;

    return 0;
    
}
